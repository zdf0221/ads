package wu.leizi.Driver.TrackerLog;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import kafka.consumer.ConsumerConfig;
import kafka.consumer.ConsumerIterator;
import kafka.consumer.KafkaStream;
import kafka.javaapi.consumer.ConsumerConnector;
import kafka.serializer.StringDecoder;
import kafka.utils.VerifiableProperties;
import wu.leizi.Driver.Driver;
import wu.leizi.config.HBConfig;
import wu.leizi.data.HeartBeatData;

public class Flume2KafkaDriver implements Driver {
	private final ConsumerConnector consumer;
	private final ConsumerConfig config;
	private Thread listenloop;
	public Flume2KafkaDriver() {
		// TODO Auto-generated constructor stub
		config = HBConfig.getInstance().ConsumerConfig();
		consumer = kafka.consumer.Consumer.createJavaConsumerConnector(config);
	}
	@Override
	public void put() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void get() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public HashMap<String, String> get(String key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getStatus() throws Exception {
		// TODO Auto-generated method stub
		return null;
	}
	
	class listenThread implements Runnable {
		
		public void run() {
			// TODO Auto-generated method stub
			task();
		}
		private void task() {
			// TODO Auto-generated method stub
			Map<String, Integer> topicCountMap = new HashMap<String, Integer>();
	        topicCountMap.put(HBConfig.getInstance().getHBTopic(), new Integer(1));

	        StringDecoder keyDecoder = new StringDecoder(new VerifiableProperties());
	        StringDecoder valueDecoder = new StringDecoder(new VerifiableProperties());

	        Map<String, List<KafkaStream<String, String>>> consumerMap = 
	                consumer.createMessageStreams(topicCountMap,keyDecoder,valueDecoder);
	        KafkaStream<String, String> stream = consumerMap.get(HBConfig.getInstance().getHBTopic()).get(0);
	        ConsumerIterator<String, String> it = stream.iterator();
	        while (it.hasNext()){
	        	String msg = it.next().message();
	        	HeartBeatData data = new HeartBeatData(msg);
	        	System.out.println();
	        }
		}
		
	}

}
