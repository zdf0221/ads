package wu.leizi.Driver.TrackerLog;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import kafka.consumer.ConsumerConfig;
import kafka.consumer.ConsumerIterator;
import kafka.consumer.KafkaStream;
import kafka.javaapi.consumer.ConsumerConnector;
import kafka.serializer.StringDecoder;
import kafka.utils.VerifiableProperties;
import wu.leizi.Driver.Driver;
import wu.leizi.config.HBConfig;
import wu.leizi.config.kafkaConfig;
import wu.leizi.data.HeartBeatData;

public class Flume2KafkaDriver implements Driver {
	private final ConsumerConnector consumer;
	private final ConsumerConfig config;
	private Thread listenloop;
	private Integer numThread;
	public Flume2KafkaDriver() {
		// TODO Auto-generated constructor stub
		config = HBConfig.getInstance().ConsumerConfig();
		consumer = kafka.consumer.Consumer.createJavaConsumerConnector(config);
		numThread = 1;
	}
	@Override
	public void put() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void get() {
		// TODO Auto-generated method stub
		listenloop = new Thread(new listenThread());
		listenloop.start();
	}

	@Override
	public HashMap<String, String> get(String key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getStatus() throws Exception {
		// TODO Auto-generated method stub
		return null;
	}
	
	class listenThread implements Runnable {
		
		public void run() {
			// TODO Auto-generated method stub
			task();
		}
		private void task() {
			// TODO Auto-generated method stub
			Map<String, Integer> topicCountMap = new HashMap<String, Integer>();
	        topicCountMap.put(kafkaConfig.getInstance().getTrackerTopic(), numThread);

	        Map<String, List<KafkaStream<byte[], byte[]>>> consumerMap = consumer.createMessageStreams(topicCountMap);
	        KafkaStream<byte[], byte[]> stream = consumerMap.get(kafkaConfig.getInstance().getTrackerTopic()).get(0);
	        ConsumerIterator<byte[], byte[]>it = stream.iterator();
	        
		}
		
	}

}
