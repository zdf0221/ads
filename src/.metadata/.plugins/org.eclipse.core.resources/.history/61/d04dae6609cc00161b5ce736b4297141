package wu.leizi.project.offline;

import kafka.producer.KeyedMessage;
import wu.leizi.Driver.heartbeat.HBClientDriver;
import wu.leizi.config.HBConfig;
import wu.leizi.data.HeartBeatData;

public class offlineComput extends HBClientDriver {
	private volatile static offlineComput instance = null;
	
	private adsStatisDriver staticsInfo = null;

	public static offlineComput getInstance() {
		if (instance == null) instance = new offlineComput("");
		return instance;
	}
	
	private offlineComput(String id) {
		super("offlineComput");
		// TODO Auto-generated constructor stub
		staticsInfo = new adsStatisDriver("offlineComput");
		
	}
	
	class HeartBeatThread extends Thread {
		
		public void run() {
			// TODO Auto-generated method stub
			Task();
		}
		private void Task() {
			// TODO Auto-generated method stub
			long no = 0;
	        while (true) {
	        	String key = String.valueOf(no++);
	            HeartBeatData data = new HeartBeatData("HBClient", "HBClient-"+id);
	            data.put("content", ServiceStatus());
	            producer.send(new KeyedMessage<String, String>(HBConfig.getInstance().getHBTopic(), key ,data.toString()));
//	            System.out.println(data);
	            try {
					Thread.sleep(HBConfig.getInstance().getHeartBeatInterval());
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	        }
		}
		
	}

}
